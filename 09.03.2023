#include <iostream>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/wait.h>
#include <unistd.h>

 if(argc < 2){
        perror("not enough arguments");
return 1;
}

    int N = atoi(argv[1]);

    int semid = semget(IPC_PRIVATE, 1, 0666 | IPC_CREAT);
    if (semid == -1) {
        perror("semget");
        return 1;
    }

    sembuf sop = {0, 0, 0};
    if (semop(semid, &sop, 1) == -1) {
        perror("semop");
        semctl(semid, 0, IPC_RMID);
        return 1;
    }

    for (int i = 1; i <= N; i++) {
        pid_t pid = fork();
        if (pid == -1) {
            perror("fork");
            semctl(semid, 0, IPC_RMID);
            return 1;
        } else if (pid == 0) {
            sop.sem_op = i;
            if (semop(semid, &sop, 1) == -1) {
                perror("semop");
                semctl(semid, 0, IPC_RMID);
                return 1;
            }
            cout << "Process " << i << endl;
            sop.sem_op = 1;
            if (semop(semid, &sop, 1) == -1) {
                perror("semop");
                semctl(semid, 0, IPC_RMID);
                return 1;
            }
            return 0;
        }
    }

    for (int i = 0; i < N; i++) {
        wait(nullptr);
    }

    if (semctl(semid, 0, IPC_RMID) == -1) {
        perror("semctl");
        return 1;
    }

    return 0;
}
